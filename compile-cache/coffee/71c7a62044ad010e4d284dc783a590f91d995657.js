(function() {
  var $, Conflict, SideView, util;

  $ = require('space-pen').$;

  SideView = require('../../lib/view/side-view').SideView;

  Conflict = require('../../lib/conflict').Conflict;

  util = require('../util');

  describe('SideView', function() {
    var editorView, ours, text, theirs, view, _ref;
    _ref = [], view = _ref[0], editorView = _ref[1], ours = _ref[2], theirs = _ref[3];
    text = function() {
      return editorView.getModel().getText();
    };
    beforeEach(function() {
      return util.openPath("single-2way-diff.txt", function(v) {
        var conflict, editor, _ref1;
        editor = v.getModel();
        editorView = v;
        conflict = Conflict.all({
          isRebase: false
        }, editor)[0];
        _ref1 = [conflict.ours, conflict.theirs], ours = _ref1[0], theirs = _ref1[1];
        return view = new SideView(ours, editor);
      });
    });
    it('applies its position as a CSS class', function() {
      expect(view.hasClass('top')).toBe(true);
      return expect(view.hasClass('bottom')).toBe(false);
    });
    it('knows if its text is unaltered', function() {
      expect(ours.isDirty).toBe(false);
      return expect(theirs.isDirty).toBe(false);
    });
    describe('when its text has been edited', function() {
      var editor;
      editor = [][0];
      beforeEach(function() {
        editor = editorView.getModel();
        editor.setCursorBufferPosition([1, 0]);
        editor.insertText("I won't keep them, but ");
        return view.detectDirty();
      });
      it('detects that its text has been edited', function() {
        return expect(ours.isDirty).toBe(true);
      });
      it('adds a .dirty class to the view', function() {
        return expect(view.hasClass('dirty')).toBe(true);
      });
      return it('reverts its text back to the original on request', function() {
        var t;
        view.revert();
        view.detectDirty();
        t = editor.getTextInBufferRange(ours.marker.getBufferRange());
        expect(t).toBe("These are my changes\n");
        return expect(ours.isDirty).toBe(false);
      });
    });
    it('triggers conflict resolution', function() {
      spyOn(ours, "resolve");
      view.useMe();
      return expect(ours.resolve).toHaveBeenCalled();
    });
    describe('when chosen as the resolution', function() {
      beforeEach(function() {
        return ours.resolve();
      });
      return it('deletes the marker line', function() {
        return expect(text()).not.toContain("<<<<<<< HEAD");
      });
    });
    return describe('when not chosen as the resolution', function() {
      beforeEach(function() {
        return theirs.resolve();
      });
      it('deletes its lines', function() {
        return expect(text()).not.toContain("These are my changes");
      });
      return it('deletes the marker line', function() {
        return expect(text()).not.toContain("<<<<<<< HEAD");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiZmlsZTovLy9DOi9Vc2Vycy9NYXhlbWlsaWFuLy5hdG9tL3BhY2thZ2VzL21lcmdlLWNvbmZsaWN0cy9zcGVjL3ZpZXcvc2lkZS12aWV3LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDJCQUFBOztBQUFBLEVBQUMsSUFBSyxPQUFBLENBQVEsV0FBUixFQUFMLENBQUQsQ0FBQTs7QUFBQSxFQUNDLFdBQVksT0FBQSxDQUFRLDBCQUFSLEVBQVosUUFERCxDQUFBOztBQUFBLEVBR0MsV0FBWSxPQUFBLENBQVEsb0JBQVIsRUFBWixRQUhELENBQUE7O0FBQUEsRUFJQSxJQUFBLEdBQU8sT0FBQSxDQUFRLFNBQVIsQ0FKUCxDQUFBOztBQUFBLEVBTUEsUUFBQSxDQUFTLFVBQVQsRUFBcUIsU0FBQSxHQUFBO0FBQ25CLFFBQUEsMENBQUE7QUFBQSxJQUFBLE9BQW1DLEVBQW5DLEVBQUMsY0FBRCxFQUFPLG9CQUFQLEVBQW1CLGNBQW5CLEVBQXlCLGdCQUF6QixDQUFBO0FBQUEsSUFFQSxJQUFBLEdBQU8sU0FBQSxHQUFBO2FBQUcsVUFBVSxDQUFDLFFBQVgsQ0FBQSxDQUFxQixDQUFDLE9BQXRCLENBQUEsRUFBSDtJQUFBLENBRlAsQ0FBQTtBQUFBLElBSUEsVUFBQSxDQUFXLFNBQUEsR0FBQTthQUNULElBQUksQ0FBQyxRQUFMLENBQWMsc0JBQWQsRUFBc0MsU0FBQyxDQUFELEdBQUE7QUFDcEMsWUFBQSx1QkFBQTtBQUFBLFFBQUEsTUFBQSxHQUFTLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FBVCxDQUFBO0FBQUEsUUFDQSxVQUFBLEdBQWEsQ0FEYixDQUFBO0FBQUEsUUFFQSxRQUFBLEdBQVcsUUFBUSxDQUFDLEdBQVQsQ0FBYTtBQUFBLFVBQUUsUUFBQSxFQUFVLEtBQVo7U0FBYixFQUFrQyxNQUFsQyxDQUEw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

//# sourceURL=/C:/Users/Maxemilian/.atom/packages/merge-conflicts/spec/view/side-view-spec.coffee
